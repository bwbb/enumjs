/**
 * @preserve
 * enum.js - Type-safe enums in JavaScript. Modeled after Java enums.
 * Version 1.0.2
 * Written by Vivin Paliath (http://vivin.net)
 * License: BSD License
 * Copyright (C) 2015
 */

(function(e,t){typeof define=="function"&&define.amd?define("enum",[],t):typeof module=="object"&&module.exports?module.exports=t():e.Enum=t()})(this,function(){function e(e,t){return e[t]?Object.keys(e[t]).reduce(function(n,r){return n&&typeof e[t][r]=="function"},!0):!0}function t(t,n){function __(){}if(typeof t=="undefined")throw new TypeError("A name is required.");if(!/^[a-z$_][0-9a-z$_]*$/i.test(t))throw new TypeError("Invalid enum name. Enum names can only consist of numbers, letters, $, and _, and can only start with letters, $, or _.");if(typeof n=="undefined")throw new TypeError("Constants are required.");if(n instanceof Array||Object.getPrototypeOf(n)===Object.prototype){if(n instanceof Array&&n.length===0)throw new TypeError("Need to provide at least one constant.");if(n instanceof Array&&!n.reduce(function(e,t){return e&&typeof t=="string"},!0))throw new TypeError("One or more elements in the constant array is not a string.");if(Object.getPrototypeOf(n)===Object.prototype){n.methods=n.methods||{};if(typeof n.constants=="undefined")throw new TypeError("If definition is an object, it must have a constants attribute.");if(Object.keys(n.constants).length===0)throw new TypeError("constants attribute in definition cannot be empty.");if(!Object.keys(n.constants).reduce(function(e,t){return Object.getPrototypeOf(n.constants[t])===Object.prototype},!0)&&!n.instanceParams&&Object.values(n.constants).forEach(function(e){return Array.isArray(e)}))throw new TypeError("One or more values in the definition.constants object is not an object.");if(!e(n,"methods"))throw new TypeError("One or more values in the definition.methods object is not a function.");if(!e(n,"staticMethods"))throw new TypeError("One or more values in the definition.staticMethods object is not a function.");if(n.instanceParams){if(!Array.isArray(n.instanceParams)||n.instanceParams.length===0||!n.instanceParams.every(function(e){return typeof e=="string"}))throw new TypeError("The instanceParams property must contain a non-zero length array of strings with the names of the enum instance parameters.");if(!Object.values(n.constants).every(function(e){return Array.isArray(e)}))throw new TypeError("One or more values in the definition.constants object is not an Array.");if(!Object.values(n.constants).every(function(e){return e.length===n.instanceParams.length}))throw new TypeError("One or more of the instance parameter arrays does not match the length defined in the instanceParams property.")}}var r=n instanceof Array,i=!r,s=(new Function(["__"],"return function __"+t+"(sentinel, name, ordinal) {\n"+"	if(!(sentinel instanceof __)) {\n"+'		throw new TypeError("Cannot instantiate an instance of '+t+'.");\n'+"	}\n"+"	this._name = name;\n"+"	this._ordinal = ordinal;\n"+"}\n"))(__),o=[],u={};Object.defineProperty(s,"values",{value:function(){return o}}),Object.defineProperty(s,"fromName",{value:function(e){var n=u[e];if(n)return n;throw new TypeError(t+" does not have a constant with name "+e+".")}}),i&&n.staticMethods&&Object.keys(n.staticMethods).forEach(function(e){Object.defineProperty(s,e,{value:n.staticMethods[e]})}),n.instanceParams&&n.instanceParams.includes("val")&&Object.defineProperty(s,"fromVal",{value:function(e){if(typeof e=="number")return o.find(function(t){return t.val===e});throw new TypeError("The val parameter must be an instance of a number.")}}),Object.defineProperty(s.prototype,"name",{value:function(){return this._name}}),Object.defineProperty(s.prototype,"ordinal",{value:function(){return this._ordinal}}),Object.defineProperty(s.prototype,"valueOf",{value:function(){return this._name}}),Object.defineProperty(s.prototype,"toString",{value:function(){return this._name}}),Object.defineProperty(s.prototype,"toJSON",{value:function(){return this._name}});var a=n;i&&(a=Object.keys(n.constants),Object.keys(n.methods).forEach(function(e){Object.defineProperty(s.prototype,e,{value:n.methods[e]})})),a.forEach(function(e,t){var r=new s(new __,e,t);i&&n.instanceParams?n.instanceParams.forEach(function(t,i){Object.defineProperty(r,t,{value:n.constants[e][i]})}):i&&Object.keys(n.constants[e]).forEach(function(t){Object.defineProperty(r,t,{value:n.constants[e][t]})}),Object.freeze(r),Object.defineProperty(s,e,{value:r}),o.push(r),u[e]=r});var f=t+" { "+s.values().map(function(e){return e.name()}).join(", ")+" }";return Object.defineProperty(s,"toString",{value:function(){return f}}),Object.freeze(o),Object.freeze(u),Object.freeze(s.prototype),Object.freeze(s),s}throw new TypeError("The definition parameter must either be an array or an object.")}return{define:t}});