/**
 * @preserve
 * enum.js - Type-safe enums in JavaScript. Modeled after Java enums.
 * Version 1.0.1
 * Written by Vivin Paliath (http://vivin.net)
 * License: BSD License
 * Copyright (C) 2015
 */

(function(e,t){typeof define=="function"&&define.amd?define("enum",[],t):typeof module=="object"&&module.exports?module.exports=t():e.Enum=t()})(this,function(){function e(e,t){function __(){}if(typeof e=="undefined")throw new TypeError("A name is required.");if(!/^[a-z$_][0-9a-z$_]*$/i.test(e))throw new TypeError("Invalid enum name. Enum names can only consist of numbers, letters, $, and _, and can only start with letters, $, or _.");if(typeof t=="undefined")throw new TypeError("Constants are required.");if(t instanceof Array||Object.getPrototypeOf(t)===Object.prototype){if(t instanceof Array&&t.length===0)throw new TypeError("Need to provide at least one constant.");if(t instanceof Array&&!t.reduce(function(e,t){return e&&typeof t=="string"},!0))throw new TypeError("One or more elements in the constant array is not a string.");if(Object.getPrototypeOf(t)===Object.prototype){t.methods=t.methods||{};if(typeof t.constants=="undefined")throw new TypeError("If definition is an object, it must have a constants attribute.");if(Object.keys(t.constants).length===0)throw new TypeError("constants attribute in definition cannot be empty.");if(!Object.keys(t.constants).reduce(function(e,n){return Object.getPrototypeOf(t.constants[n])===Object.prototype},!0))throw new TypeError("One or more values in the definition.constants object is not an object.");if(!Object.keys(t.methods).reduce(function(e,n){return e&&typeof t.methods[n]=="function"},!0))throw new TypeError("One or more values in the definition.methods object is not a function.")}var n=t instanceof Array,r=!n,i=(new Function(["__"],"return function __"+e+"(sentinel, name, ordinal) {\n"+"	if(!(sentinel instanceof __)) {\n"+'		throw new TypeError("Cannot instantiate an instance of '+e+'.");\n'+"	}\n"+"	this._name = name;\n"+"	this._ordinal = ordinal;\n"+"}\n"))(__),s=[],o={};Object.defineProperty(i,"values",{value:function(){return s}}),Object.defineProperty(i,"fromName",{value:function(t){var n=o[t];if(n)return n;throw new TypeError(e+" does not have a constant with name "+t+".")}}),Object.defineProperty(i.prototype,"values",{value:i.values}),Object.defineProperty(i.prototype,"fromName",{value:i.fromName}),Object.defineProperty(i.prototype,"name",{value:function(){return this._name}}),Object.defineProperty(i.prototype,"ordinal",{value:function(){return this._ordinal}}),Object.defineProperty(i.prototype,"valueOf",{value:function(){return this._name}}),Object.defineProperty(i.prototype,"toString",{value:function(){return this._name}});var u=t;r&&(u=Object.keys(t.constants),Object.keys(t.methods).forEach(function(e){Object.defineProperty(i.prototype,e,{value:t.methods[e]})})),u.forEach(function(e,n){var u=new i(new __,e,n);r&&Object.keys(t.constants[e]).forEach(function(n){Object.defineProperty(u,n,{value:t.constants[e][n]})}),Object.freeze(u),Object.defineProperty(i,e,{value:u}),s.push(u),o[e]=u});var a=e+" { "+i.values().map(function(e){return e.name()}).join(", ")+" }";return Object.defineProperty(i,"toString",{value:function(){return a}}),Object.freeze(s),Object.freeze(o),Object.freeze(i.prototype),Object.freeze(i),i}throw new TypeError("The definition parameter must either be an array or an object.")}return{define:e}});